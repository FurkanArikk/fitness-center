# CLASS SERVICE API ENDPOINT DOCUMENTATION

Base URL: http://localhost:8003/api/v1

## HEALTH CHECK ENDPOINT

### Check Service Health
Endpoint: GET /health
Description: Verifies the service is running properly
Response: 
- 200 OK with JSON:
```json
{
  "status": "up",
  "service": "class-service",
  "time": "2023-07-15T12:00:00Z"
}
```

-----------------------------------------------------------

## CLASS ENDPOINTS

### 1. Get All Classes
Endpoint: GET /classes
Description: Retrieves a list of all classes, optionally filtered by active status
Query Parameters:
- active (optional): Filter by active status (true/false)
Response:
```json
[
  {
    "class_id": 1,
    "class_name": "Yoga Flow",
    "description": "A flowing sequence of poses that synchronizes breath with movement",
    "duration": 60,
    "capacity": 20,
    "difficulty": "Beginner",
    "is_active": true,
    "created_at": "2023-07-01T10:00:00Z",
    "updated_at": "2023-07-01T10:00:00Z"
  },
  {
    "class_id": 2,
    "class_name": "HIIT",
    "description": "High-intensity interval training",
    "duration": 45,
    "capacity": 15,
    "difficulty": "Advanced",
    "is_active": true,
    "created_at": "2023-07-01T11:00:00Z",
    "updated_at": "2023-07-01T11:00:00Z"
  }
]
```
Error Responses:
- 500: Internal server error

### 2. Get a Class
Endpoint: GET /classes/{id}
Description: Retrieves a specific class's information
Path Parameters:
- id: Class ID (integer)
Response:
```json
{
  "class_id": 1,
  "class_name": "Yoga Flow",
  "description": "A flowing sequence of poses that synchronizes breath with movement",
  "duration": 60,
  "capacity": 20,
  "difficulty": "Beginner",
  "is_active": true,
  "created_at": "2023-07-01T10:00:00Z",
  "updated_at": "2023-07-01T10:00:00Z"
}
```
Error Responses:
- 400: Invalid class ID
- 404: Class not found
- 500: Internal server error

### 3. Create a Class
Endpoint: POST /classes
Description: Creates a new class
Request Body:
```json
{
  "class_name": "Pilates",
  "description": "A system of exercises designed to improve physical strength",
  "duration": 50,
  "capacity": 15,
  "difficulty": "Intermediate",
  "is_active": true
}
```
Response:
- 201 Created with the newly created class including ID and timestamps:
```json
{
  "class_id": 3,
  "class_name": "Pilates",
  "description": "A system of exercises designed to improve physical strength",
  "duration": 50,
  "capacity": 15,
  "difficulty": "Intermediate",
  "is_active": true,
  "created_at": "2023-07-15T10:00:00Z",
  "updated_at": "2023-07-15T10:00:00Z"
}
```
Error Responses:
- 400: Invalid request body or validation error
- 500: Internal server error

### 4. Update a Class
Endpoint: PUT /classes/{id}
Description: Updates an existing class
Path Parameters:
- id: Class ID (integer)
Request Body:
```json
{
  "class_name": "Pilates Plus",
  "description": "An advanced system of exercises designed to improve physical strength",
  "duration": 55,
  "capacity": 12,
  "difficulty": "Advanced",
  "is_active": true
}
```
Response:
- 200 OK with the updated class data:
```json
{
  "class_id": 3,
  "class_name": "Pilates Plus",
  "description": "An advanced system of exercises designed to improve physical strength",
  "duration": 55,
  "capacity": 12,
  "difficulty": "Advanced",
  "is_active": true,
  "created_at": "2023-07-15T10:00:00Z",
  "updated_at": "2023-07-15T11:30:00Z"
}
```
Error Responses:
- 400: Invalid class ID or request body
- 404: Class not found
- 500: Internal server error

### 5. Delete a Class
Endpoint: DELETE /classes/{id}
Description: Deletes a class
Path Parameters:
- id: Class ID (integer)
Response:
- 200 OK with message:
```json
{
  "message": "Class deleted successfully"
}
```
Error Responses:
- 400: Invalid class ID
- 404: Class not found
- 409: Class is used in schedules and cannot be deleted
- 500: Internal server error

-----------------------------------------------------------

## SCHEDULE ENDPOINTS

### 1. Get All Schedules
Endpoint: GET /schedules
Description: Retrieves all class schedules, optionally filtered by status
Query Parameters:
- status (optional): Filter by status ('active', 'cancelled')
Response:
```json
[
  {
    "schedule_id": 1,
    "class_id": 1,
    "trainer_id": 5,
    "room_id": 1,
    "start_time": "08:00:00",
    "end_time": "09:00:00",
    "day_of_week": "Monday",
    "status": "active",
    "created_at": "2023-07-02T10:00:00Z",
    "updated_at": "2023-07-02T10:00:00Z",
    "class_name": "Yoga Flow",
    "class_duration": 60
  },
  {
    "schedule_id": 2,
    "class_id": 2,
    "trainer_id": 7,
    "room_id": 2,
    "start_time": "18:30:00",
    "end_time": "19:15:00",
    "day_of_week": "Monday",
    "status": "active",
    "created_at": "2023-07-02T11:00:00Z",
    "updated_at": "2023-07-02T11:00:00Z",
    "class_name": "HIIT",
    "class_duration": 45
  }
]
```
Error Responses:
- 500: Internal server error

### 2. Get a Schedule
Endpoint: GET /schedules/{id}
Description: Retrieves a specific schedule's information
Path Parameters:
- id: Schedule ID (integer)
Response:
```json
{
  "schedule_id": 1,
  "class_id": 1,
  "trainer_id": 5,
  "room_id": 1,
  "start_time": "08:00:00",
  "end_time": "09:00:00",
  "day_of_week": "Monday",
  "status": "active",
  "created_at": "2023-07-02T10:00:00Z",
  "updated_at": "2023-07-02T10:00:00Z",
  "class_name": "Yoga Flow",
  "class_duration": 60
}
```
Error Responses:
- 400: Invalid schedule ID
- 404: Schedule not found
- 500: Internal server error

### 3. Get Schedules for a Class
Endpoint: GET /schedules/class/{classId}
Description: Retrieves all schedules for a specific class
Path Parameters:
- classId: Class ID (integer)
Response:
```json
[
  {
    "schedule_id": 1,
    "class_id": 1,
    "trainer_id": 5,
    "room_id": 1,
    "start_time": "08:00:00",
    "end_time": "09:00:00",
    "day_of_week": "Monday",
    "status": "active",
    "created_at": "2023-07-02T10:00:00Z",
    "updated_at": "2023-07-02T10:00:00Z",
    "class_name": "Yoga Flow",
    "class_duration": 60
  },
  {
    "schedule_id": 10,
    "class_id": 1,
    "trainer_id": 8,
    "room_id": 2,
    "start_time": "10:00:00",
    "end_time": "11:00:00",
    "day_of_week": "Wednesday",
    "status": "active",
    "created_at": "2023-07-02T11:00:00Z",
    "updated_at": "2023-07-02T11:00:00Z",
    "class_name": "Yoga Flow",
    "class_duration": 60
  }
]
```
Error Responses:
- 400: Invalid class ID
- 500: Internal server error

### 4. Create a Schedule
Endpoint: POST /schedules
Description: Creates a new class schedule
Request Body:
```json
{
  "class_id": 2,
  "trainer_id": 7,
  "room_id": 3,
  "start_time": "18:30:00",
  "end_time": "19:15:00",
  "day_of_week": "Tuesday",
  "status": "active"
}
```
Response:
- 201 Created with the newly created schedule including ID and timestamps:
```json
{
  "schedule_id": 11,
  "class_id": 2,
  "trainer_id": 7,
  "room_id": 3,
  "start_time": "18:30:00",
  "end_time": "19:15:00",
  "day_of_week": "Tuesday",
  "status": "active",
  "created_at": "2023-07-15T12:00:00Z",
  "updated_at": "2023-07-15T12:00:00Z"
}
```
Error Responses:
- 400: Invalid request body, validation error, or invalid class
- 500: Internal server error

### 5. Update a Schedule
Endpoint: PUT /schedules/{id}
Description: Updates an existing schedule
Path Parameters:
- id: Schedule ID (integer)
Request Body:
```json
{
  "class_id": 2,
  "trainer_id": 7,
  "room_id": 4,
  "start_time": "19:00:00",
  "end_time": "19:45:00",
  "day_of_week": "Tuesday",
  "status": "active"
}
```
Response:
- 200 OK with the updated schedule data:
```json
{
  "schedule_id": 11,
  "class_id": 2,
  "trainer_id": 7,
  "room_id": 4,
  "start_time": "19:00:00",
  "end_time": "19:45:00",
  "day_of_week": "Tuesday",
  "status": "active",
  "created_at": "2023-07-15T12:00:00Z",
  "updated_at": "2023-07-15T14:30:00Z"
}
```
Error Responses:
- 400: Invalid schedule ID, request body, or invalid class
- 404: Schedule not found
- 500: Internal server error

### 6. Delete a Schedule
Endpoint: DELETE /schedules/{id}
Description: Deletes a schedule
Path Parameters:
- id: Schedule ID (integer)
Response:
- 200 OK with message:
```json
{
  "message": "Schedule deleted successfully"
}
```
Error Responses:
- 400: Invalid schedule ID
- 404: Schedule not found
- 409: Schedule has bookings and cannot be deleted
- 500: Internal server error

-----------------------------------------------------------

## BOOKING ENDPOINTS

### 1. Get All Bookings
Endpoint: GET /bookings
Description: Retrieves all bookings, optionally filtered by status and date
Query Parameters:
- status (optional): Filter by attendance status ('booked', 'attended', 'cancelled', 'no_show')
- date (optional): Filter by booking date (YYYY-MM-DD)
Response:
```json
[
  {
    "booking_id": 1,
    "schedule_id": 1,
    "member_id": 3,
    "booking_date": "2023-07-10T08:00:00Z",
    "attendance_status": "attended",
    "feedback_rating": 5,
    "feedback_comment": "Great yoga session, very relaxing!",
    "created_at": "2023-07-03T10:00:00Z",
    "updated_at": "2023-07-10T09:15:00Z",
    "class_name": "Yoga Flow",
    "day_of_week": "Monday",
    "start_time": "08:00:00",
    "trainer_id": 5
  },
  {
    "booking_id": 2,
    "schedule_id": 2,
    "member_id": 7,
    "booking_date": "2023-07-10T18:30:00Z",
    "attendance_status": "attended",
    "feedback_rating": 4,
    "feedback_comment": "Intense workout, loved it!",
    "created_at": "2023-07-03T14:00:00Z",
    "updated_at": "2023-07-10T19:45:00Z",
    "class_name": "HIIT",
    "day_of_week": "Monday",
    "start_time": "18:30:00",
    "trainer_id": 7
  }
]
```
Error Responses:
- 400: Invalid date format
- 500: Internal server error

### 2. Get a Booking
Endpoint: GET /bookings/{id}
Description: Retrieves a specific booking's information
Path Parameters:
- id: Booking ID (integer)
Response:
```json
{
  "booking_id": 1,
  "schedule_id": 1,
  "member_id": 3,
  "booking_date": "2023-07-10T08:00:00Z",
  "attendance_status": "attended",
  "feedback_rating": 5,
  "feedback_comment": "Great yoga session, very relaxing!",
  "created_at": "2023-07-03T10:00:00Z",
  "updated_at": "2023-07-10T09:15:00Z",
  "class_name": "Yoga Flow",
  "day_of_week": "Monday",
  "start_time": "08:00:00",
  "trainer_id": 5
}
```
Error Responses:
- 400: Invalid booking ID
- 404: Booking not found
- 500: Internal server error

### 3. Get Member's Bookings
Endpoint: GET /bookings/member/{memberId}
Description: Retrieves all bookings for a specific member
Path Parameters:
- memberId: Member ID (integer)
Response:
```json
[
  {
    "booking_id": 1,
    "schedule_id": 1,
    "member_id": 3,
    "booking_date": "2023-07-10T08:00:00Z",
    "attendance_status": "attended",
    "feedback_rating": 5,
    "feedback_comment": "Great yoga session, very relaxing!",
    "created_at": "2023-07-03T10:00:00Z",
    "updated_at": "2023-07-10T09:15:00Z",
    "class_name": "Yoga Flow",
    "day_of_week": "Monday",
    "start_time": "08:00:00",
    "trainer_id": 5
  },
  {
    "booking_id": 12,
    "schedule_id": 5,
    "member_id": 3,
    "booking_date": "2023-07-12T06:30:00Z",
    "attendance_status": "no_show",
    "created_at": "2023-07-05T11:00:00Z",
    "updated_at": "2023-07-12T08:00:00Z",
    "class_name": "Spinning",
    "day_of_week": "Wednesday",
    "start_time": "06:30:00",
    "trainer_id": 3
  }
]
```
Error Responses:
- 400: Invalid member ID
- 500: Internal server error

### 4. Create a Booking
Endpoint: POST /bookings
Description: Creates a new booking
Request Body:
```json
{
  "schedule_id": 2,
  "member_id": 5,
  "booking_date": "2023-07-24T18:30:00Z"
}
```
Response:
- 201 Created with the newly created booking:
```json
{
  "booking_id": 21,
  "schedule_id": 2,
  "member_id": 5,
  "booking_date": "2023-07-24T18:30:00Z",
  "attendance_status": "booked",
  "created_at": "2023-07-15T14:00:00Z",
  "updated_at": "2023-07-15T14:00:00Z"
}
```
Error Responses:
- 400: Invalid request body or validation error
- 409: Class is at full capacity or member already has a booking for this class
- 500: Internal server error

### 5. Update Booking Status
Endpoint: PUT /bookings/{id}/status
Description: Updates a booking's attendance status
Path Parameters:
- id: Booking ID (integer)
Request Body:
```json
{
  "attendance_status": "attended"
}
```
Response:
- 200 OK with the updated booking:
```json
{
  "booking_id": 21,
  "schedule_id": 2,
  "member_id": 5,
  "booking_date": "2023-07-24T18:30:00Z",
  "attendance_status": "attended",
  "created_at": "2023-07-15T14:00:00Z",
  "updated_at": "2023-07-24T19:45:00Z"
}
```
Error Responses:
- 400: Invalid booking ID or status
- 404: Booking not found
- 500: Internal server error

### 6. Add Booking Feedback
Endpoint: POST /bookings/{id}/feedback
Description: Adds feedback to a booking (only for attended classes)
Path Parameters:
- id: Booking ID (integer)
Request Body:
```json
{
  "rating": 4,
  "comment": "Great workout, but a bit crowded today"
}
```
Response:
- 200 OK with the updated booking:
```json
{
  "booking_id": 21,
  "schedule_id": 2,
  "member_id": 5,
  "booking_date": "2023-07-24T18:30:00Z",
  "attendance_status": "attended",
  "feedback_rating": 4,
  "feedback_comment": "Great workout, but a bit crowded today",
  "created_at": "2023-07-15T14:00:00Z",
  "updated_at": "2023-07-24T20:00:00Z"
}
```
Error Responses:
- 400: Invalid booking ID, request body, or booking not in 'attended' status
- 404: Booking not found
- 500: Internal server error

### 7. Cancel Booking
Endpoint: DELETE /bookings/{id}
Description: Cancels a booking (only bookings with 'booked' status)
Path Parameters:
- id: Booking ID (integer)
Response:
- 200 OK with the cancelled booking:
```json
{
  "booking_id": 21,
  "schedule_id": 2,
  "member_id": 5,
  "booking_date": "2023-07-24T18:30:00Z",
  "attendance_status": "cancelled",
  "created_at": "2023-07-15T14:00:00Z",
  "updated_at": "2023-07-16T09:30:00Z"
}
```
Error Responses:
- 400: Invalid booking ID or booking not in 'booked' status
- 404: Booking not found
- 500: Internal server error

-----------------------------------------------------------

## TESTING WITH CURL

### Health Check
```bash
curl -X GET http://localhost:8003/health
```

### Get all classes
```bash
curl -X GET http://localhost:8003/api/v1/classes
```

### Get active classes only
```bash
curl -X GET "http://localhost:8003/api/v1/classes?active=true"
```

### Create a class
```bash
curl -X POST \
  http://localhost:8003/api/v1/classes \
  -H 'Content-Type: application/json' \
  -d '{
    "class_name": "Pilates",
    "description": "A system of exercises designed to improve physical strength",
    "duration": 50,
    "capacity": 15,
    "difficulty": "Intermediate",
    "is_active": true
  }'
```

### Update a class
```bash
curl -X PUT \
  http://localhost:8003/api/v1/classes/3 \
  -H 'Content-Type: application/json' \
  -d '{
    "class_name": "Pilates Plus",
    "description": "An advanced system of exercises designed to improve physical strength",
    "duration": 55,
    "capacity": 12,
    "difficulty": "Advanced",
    "is_active": true
  }'
```

### Get all schedules
```bash
curl -X GET http://localhost:8003/api/v1/schedules
```

### Get active schedules only
```bash
curl -X GET "http://localhost:8003/api/v1/schedules?status=active"
```

### Create a schedule
```bash
curl -X POST \
  http://localhost:8003/api/v1/schedules \
  -H 'Content-Type: application/json' \
  -d '{
    "class_id": 2,
    "trainer_id": 7,
    "room_id": 3,
    "start_time": "18:30:00",
    "end_time": "19:15:00",
    "day_of_week": "Tuesday",
    "status": "active"
  }'
```

### Get all bookings
```bash
curl -X GET http://localhost:8003/api/v1/bookings
```

### Get bookings with filters
```bash
curl -X GET "http://localhost:8003/api/v1/bookings?status=attended&date=2023-07-10"
```

### Get a specific member's bookings
```bash
curl -X GET http://localhost:8003/api/v1/bookings/member/3
```

### Create a booking
```bash
curl -X POST \
  http://localhost:8003/api/v1/bookings \
  -H 'Content-Type: application/json' \
  -d '{
    "schedule_id": 2,
    "member_id": 5,
    "booking_date": "2023-07-24T18:30:00Z"
  }'
```

### Update booking status
```bash
curl -X PUT \
  http://localhost:8003/api/v1/bookings/21/status \
  -H 'Content-Type: application/json' \
  -d '{
    "attendance_status": "attended"
  }'
```

### Add feedback to a booking
```bash
curl -X POST \
  http://localhost:8003/api/v1/bookings/21/feedback \
  -H 'Content-Type: application/json' \
  -d '{
    "rating": 4,
    "comment": "Great workout, but a bit crowded today"
  }'
```

### Cancel a booking
```bash
curl -X DELETE http://localhost:8003/api/v1/bookings/21
```
