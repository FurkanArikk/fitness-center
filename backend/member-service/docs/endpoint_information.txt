# MEMBER SERVICE API ENDPOINT DOCUMENTATION

Base URL: http://localhost:8001/api/v1

## HEALTH CHECK ENDPOINT

### Check Service Health
Endpoint: GET /health
Description: Verifies the service is running properly
Response: 
- 200 OK with text "Member service is healthy"

-----------------------------------------------------------

## MEMBER ENDPOINTS

### 1. Get a Member
Endpoint: GET /members/{id}
Description: Retrieves a specific member's information
Path Parameters:
- id: Member ID (integer)
Response:
```json
{
  "id": 123,
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "phone": "555-123-4567",
  "address": "123 Main St",
  "dateOfBirth": "1990-01-15T00:00:00Z",
  "emergencyContactName": "Jane Doe",
  "emergencyContactPhone": "555-987-6543",
  "joinDate": "2023-02-01T00:00:00Z",
  "status": "active",
  "createdAt": "2023-02-01T10:30:00Z",
  "updatedAt": "2023-02-01T10:30:00Z"
}
```
Error Responses:
- 400: Invalid member ID
- 404: Member not found
- 500: Internal server error

### 2. Create a Member
Endpoint: POST /members
Description: Creates a new member
Request Body:
```json
{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "phone": "555-123-4567",
  "address": "123 Main St",
  "dateOfBirth": "1990-01-15T00:00:00Z",
  "emergencyContactName": "Jane Doe",
  "emergencyContactPhone": "555-987-6543"
}
```
Response:
- 201 Created with the newly created member including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 409: Email already exists
- 500: Internal server error

### 3. Update a Member
Endpoint: PUT /members/{id}
Description: Updates an existing member
Path Parameters:
- id: Member ID (integer)
Request Body:
```json
{
  "firstName": "John",
  "lastName": "Smith",
  "email": "john.smith@example.com",
  "phone": "555-123-8888",
  "address": "456 Oak Ave"
}
```
Response:
- 200 OK with the updated member data
Error Responses:
- 400: Invalid member ID or request body
- 404: Member not found
- 409: Email already exists (if changing to an email already used)
- 500: Internal server error

### 4. Delete a Member
Endpoint: DELETE /members/{id}
Description: Deletes a member
Path Parameters:
- id: Member ID (integer)
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid member ID
- 404: Member not found
- 500: Internal server error

### 5. Get Member's Memberships
Endpoint: GET /members/{memberID}/memberships
Description: Retrieves all memberships associated with a member
Path Parameters:
- memberID: Member ID (integer)
Response:
```json
[
  {
    "id": 1,
    "memberId": 123,
    "membershipId": 456,
    "startDate": "2023-01-01T00:00:00Z",
    "endDate": "2023-04-01T00:00:00Z",
    "paymentStatus": "paid",
    "contractSigned": true,
    "createdAt": "2023-01-01T09:00:00Z",
    "updatedAt": "2023-01-01T09:00:00Z"
  }
]
```
Error Responses:
- 400: Invalid member ID
- 500: Internal server error

### 6. Get Member's Active Membership
Endpoint: GET /members/{memberID}/active-membership
Description: Retrieves the currently active membership for a member
Path Parameters:
- memberID: Member ID (integer)
Response:
```json
{
  "id": 1,
  "memberId": 123,
  "membershipId": 456,
  "membershipName": "Premium",
  "startDate": "2023-01-01T00:00:00Z",
  "endDate": "2023-04-01T00:00:00Z",
  "daysRemaining": 45,
  "paymentStatus": "paid",
  "contractSigned": true,
  "isActive": true,
  "createdAt": "2023-01-01T09:00:00Z",
  "updatedAt": "2023-01-01T09:00:00Z"
}
```
Error Responses:
- 400: Invalid member ID
- 404: No active membership found
- 500: Internal server error

### 7. Get Member's Assessments
Endpoint: GET /members/{memberID}/assessments
Description: Retrieves all fitness assessments for a member
Path Parameters:
- memberID: Member ID (integer)
Response:
```json
[
  {
    "id": 1,
    "memberId": 123,
    "trainerId": 789,
    "assessmentDate": "2023-02-15T10:00:00Z",
    "height": 175,
    "weight": 80.5,
    "bodyFatPercentage": 18.2,
    "bmi": 26.3,
    "notes": "Initial assessment",
    "goalsSet": "Lose weight and improve strength",
    "nextAssessmentDate": "2023-03-15T10:00:00Z",
    "createdAt": "2023-02-15T10:30:00Z",
    "updatedAt": "2023-02-15T10:30:00Z"
  }
]
```
Error Responses:
- 400: Invalid member ID
- 500: Internal server error

-----------------------------------------------------------

## MEMBERSHIP ENDPOINTS

### 1. Get All Memberships
Endpoint: GET /memberships
Description: Retrieves all membership types
Query Parameters:
- active: Optional. If set to "true", returns only active memberships
Response:
```json
[
  {
    "id": 1,
    "membershipName": "Basic",
    "description": "Access to gym facilities during standard hours",
    "duration": 1,
    "price": 29.99,
    "isActive": true,
    "createdAt": "2023-01-01T00:00:00Z",
    "updatedAt": "2023-01-01T00:00:00Z"
  }
]
```
Error Responses:
- 500: Internal server error

### 2. Get a Specific Membership
Endpoint: GET /memberships/{id}
Description: Retrieves a specific membership type
Path Parameters:
- id: Membership ID (integer)
Response:
```json
{
  "id": 1,
  "membershipName": "Basic",
  "description": "Access to gym facilities during standard hours",
  "duration": 1,
  "price": 29.99,
  "isActive": true,
  "createdAt": "2023-01-01T00:00:00Z",
  "updatedAt": "2023-01-01T00:00:00Z"
}
```
Error Responses:
- 400: Invalid membership ID
- 404: Membership not found
- 500: Internal server error

### 3. Create a Membership
Endpoint: POST /memberships
Description: Creates a new membership type
Request Body:
```json
{
  "membershipName": "Weekend Warrior",
  "description": "Access on weekends only",
  "duration": 1,
  "price": 19.99,
  "isActive": true
}
```
Response:
- 201 Created with the newly created membership including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 409: Membership name already exists
- 500: Internal server error

### 4. Update a Membership
Endpoint: PUT /memberships/{id}
Description: Updates an existing membership
Path Parameters:
- id: Membership ID (integer)
Request Body:
```json
{
  "membershipName": "Premium Plus",
  "description": "Enhanced Premium membership with additional benefits",
  "duration": 3,
  "price": 59.99,
  "isActive": true
}
```
Response:
- 200 OK with the updated membership data
Error Responses:
- 400: Invalid membership ID or request body
- 404: Membership not found
- 409: Membership name already exists (if changing to a name already used)
- 500: Internal server error

### 5. Delete a Membership
Endpoint: DELETE /memberships/{id}
Description: Deletes a membership type
Path Parameters:
- id: Membership ID (integer)
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid membership ID
- 404: Membership not found
- 409: Membership is in use by members and cannot be deleted
- 500: Internal server error

### 6. Update Membership Status
Endpoint: PUT /memberships/{id}/status
Description: Activates or deactivates a membership type
Path Parameters:
- id: Membership ID (integer)
Request Body:
```json
{
  "is_active": false
}
```
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid membership ID or request body
- 404: Membership not found
- 500: Internal server error

### 7. Get Membership Benefits
Endpoint: GET /memberships/{membershipID}/benefits
Description: Retrieves all benefits associated with a membership type
Path Parameters:
- membershipID: Membership ID (integer)
Response:
```json
[
  {
    "id": 1,
    "membershipId": 456,
    "benefitName": "Gym Access",
    "benefitDescription": "Full access to gym equipment 24/7",
    "createdAt": "2023-01-01T00:00:00Z",
    "updatedAt": "2023-01-01T00:00:00Z"
  }
]
```
Error Responses:
- 400: Invalid membership ID
- 500: Internal server error

-----------------------------------------------------------

## BENEFIT ENDPOINTS

### 1. Get a Benefit
Endpoint: GET /benefits/{id}
Description: Retrieves a specific benefit
Path Parameters:
- id: Benefit ID (integer)
Response:
```json
{
  "id": 1,
  "membershipId": 456,
  "benefitName": "Gym Access",
  "benefitDescription": "Full access to gym equipment 24/7",
  "createdAt": "2023-01-01T00:00:00Z",
  "updatedAt": "2023-01-01T00:00:00Z"
}
```
Error Responses:
- 400: Invalid benefit ID
- 404: Benefit not found
- 500: Internal server error

### 2. Create a Benefit
Endpoint: POST /benefits
Description: Creates a new membership benefit
Request Body:
```json
{
  "membershipId": 456,
  "benefitName": "Personal Training",
  "benefitDescription": "2 personal training sessions per month"
}
```
Response:
- 201 Created with the newly created benefit including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 500: Internal server error

### 3. Update a Benefit
Endpoint: PUT /benefits/{id}
Description: Updates an existing benefit
Path Parameters:
- id: Benefit ID (integer)
Request Body:
```json
{
  "membershipId": 456,
  "benefitName": "Personal Training",
  "benefitDescription": "3 personal training sessions per month"
}
```
Response:
- 200 OK with the updated benefit data
Error Responses:
- 400: Invalid benefit ID or request body
- 404: Benefit not found
- 500: Internal server error

### 4. Delete a Benefit
Endpoint: DELETE /benefits/{id}
Description: Deletes a benefit
Path Parameters:
- id: Benefit ID (integer)
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid benefit ID
- 404: Benefit not found
- 500: Internal server error

-----------------------------------------------------------

## ASSESSMENT ENDPOINTS

### 1. Get an Assessment
Endpoint: GET /assessments/{id}
Description: Retrieves a specific fitness assessment
Path Parameters:
- id: Assessment ID (integer)
Response:
```json
{
  "id": 1,
  "memberId": 123,
  "trainerId": 789,
  "assessmentDate": "2023-02-15T10:00:00Z",
  "height": 175,
  "weight": 80.5,
  "bodyFatPercentage": 18.2,
  "bmi": 26.3,
  "notes": "Initial assessment",
  "goalsSet": "Lose weight and improve strength",
  "nextAssessmentDate": "2023-03-15T10:00:00Z",
  "createdAt": "2023-02-15T10:30:00Z",
  "updatedAt": "2023-02-15T10:30:00Z"
}
```
Error Responses:
- 400: Invalid assessment ID
- 404: Assessment not found
- 500: Internal server error

### 2. Create an Assessment
Endpoint: POST /assessments
Description: Creates a new fitness assessment
Request Body:
```json
{
  "memberId": 123,
  "trainerId": 789,
  "assessmentDate": "2023-04-15T10:00:00Z",
  "height": 175,
  "weight": 76.8,
  "bodyFatPercentage": 16.9,
  "bmi": 25.1,
  "notes": "Continued progress",
  "goalsSet": "Build muscle and improve flexibility",
  "nextAssessmentDate": "2023-05-15T10:00:00Z"
}
```
Response:
- 201 Created with the newly created assessment including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 500: Internal server error

### 3. Update an Assessment
Endpoint: PUT /assessments/{id}
Description: Updates an existing assessment
Path Parameters:
- id: Assessment ID (integer)
Request Body:
```json
{
  "memberId": 123,
  "trainerId": 789,
  "assessmentDate": "2023-04-15T10:00:00Z",
  "weight": 76.5,
  "bodyFatPercentage": 16.8,
  "bmi": 25.0,
  "notes": "Excellent progress"
}
```
Response:
- 200 OK with the updated assessment data
Error Responses:
- 400: Invalid assessment ID or request body
- 404: Assessment not found
- 500: Internal server error

### 4. Delete an Assessment
Endpoint: DELETE /assessments/{id}
Description: Deletes an assessment
Path Parameters:
- id: Assessment ID (integer)
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid assessment ID
- 404: Assessment not found
- 500: Internal server error

-----------------------------------------------------------

## MEMBER-MEMBERSHIP ENDPOINTS

### 1. Get a Member-Membership
Endpoint: GET /member-memberships/{id}
Description: Retrieves a specific member-membership relationship
Path Parameters:
- id: Member-Membership ID (integer)
Response:
```json
{
  "id": 1,
  "memberId": 123,
  "membershipId": 456,
  "startDate": "2023-01-01T00:00:00Z",
  "endDate": "2023-04-01T00:00:00Z",
  "paymentStatus": "paid",
  "contractSigned": true,
  "createdAt": "2023-01-01T09:00:00Z",
  "updatedAt": "2023-01-01T09:00:00Z"
}
```
Error Responses:
- 400: Invalid member-membership ID
- 404: Member-membership not found
- 500: Internal server error

### 2. Create a Member-Membership
Endpoint: POST /member-memberships
Description: Creates a new member-membership relationship
Request Body:
```json
{
  "memberId": 123,
  "membershipId": 456,
  "startDate": "2023-07-01T00:00:00Z",
  "endDate": "2023-10-01T00:00:00Z",
  "paymentStatus": "paid",
  "contractSigned": true
}
```
Response:
- 201 Created with the newly created member-membership including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 500: Internal server error

### 3. Update a Member-Membership
Endpoint: PUT /member-memberships/{id}
Description: Updates an existing member-membership relationship
Path Parameters:
- id: Member-Membership ID (integer)
Request Body:
```json
{
  "memberId": 123,
  "membershipId": 456,
  "startDate": "2023-07-01T00:00:00Z",
  "endDate": "2023-12-01T00:00:00Z",
  "paymentStatus": "paid",
  "contractSigned": true
}
```
Response:
- 200 OK with the updated member-membership data
Error Responses:
- 400: Invalid member-membership ID or request body
- 404: Member-membership not found
- 500: Internal server error

### 4. Delete a Member-Membership
Endpoint: DELETE /member-memberships/{id}
Description: Deletes a member-membership relationship
Path Parameters:
- id: Member-Membership ID (integer)
Response:
- 204 No Content if successful
Error Responses:
- 400: Invalid member-membership ID
- 404: Member-membership not found
- 500: Internal server error

-----------------------------------------------------------

## TESTING WITH CURL

### Health Check
```bash
curl -X GET http://localhost:8001/health
```

### Get all memberships
```bash
curl -X GET http://localhost:8001/api/v1/memberships
```

### Get active memberships only
```bash
curl -X GET "http://localhost:8001/api/v1/memberships?active=true"
```

### Create a membership
```bash
curl -X POST \
  http://localhost:8001/api/v1/memberships \
  -H 'Content-Type: application/json' \
  -d '{
    "membershipName": "Weekend Warrior",
    "description": "Access on weekends only",
    "duration": 1,
    "price": 19.99,
    "isActive": true
}'
```

### Update a membership
```bash
curl -X PUT \
  http://localhost:8001/api/v1/memberships/1 \
  -H 'Content-Type: application/json' \
  -d '{
    "membershipName": "Weekend Warrior Plus",
    "description": "Enhanced weekend access",
    "duration": 1,
    "price": 24.99,
    "isActive": true
}'
```

### Get a member
```bash
curl -X GET http://localhost:8001/api/v1/members/1
```

### Get a member's active membership
```bash
curl -X GET http://localhost:8001/api/v1/members/1/active-membership
```

### Create an assessment
```bash
curl -X POST \
  http://localhost:8001/api/v1/assessments \
  -H 'Content-Type: application/json' \
  -d '{
    "memberId": 1,
    "trainerId": 2,
    "assessmentDate": "2023-07-15T10:00:00Z",
    "height": 175,
    "weight": 78.5,
    "bodyFatPercentage": 17.0,
    "bmi": 25.6,
    "notes": "Monthly checkup",
    "goalsSet": "Maintain current fitness level",
    "nextAssessmentDate": "2023-08-15T10:00:00Z"
}'
```

### Get all benefits for a membership
```bash
curl -X GET http://localhost:8001/api/v1/memberships/1/benefits
```

### Create a new benefit
```bash
curl -X POST \
  http://localhost:8001/api/v1/benefits \
  -H 'Content-Type: application/json' \
  -d '{
    "membershipId": 1,
    "benefitName": "Free Towel Service",
    "benefitDescription": "Complimentary towel service during workouts"
}'
```
