services:
  postgres-auth:
    image: postgres:17
    container_name: postgres-auth
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-fitness_auth}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "${DB_EXTERNAL_PORT:-5437}:5432"
    networks:
      - fitness-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fitness_auth}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    build: .
    container_name: auth-service
    env_file:
      - .env
    ports:
      - "${SERVER_PORT:-8085}:8085"
    environment:
      - SERVER_HOST=${SERVER_HOST:-0.0.0.0}
      - SERVER_PORT=${SERVER_PORT:-8085}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRE_HOURS=${JWT_EXPIRE_HOURS:-24}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - DB_HOST=${DB_HOST:-postgres-auth}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-fitness_auth}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
    depends_on:
      postgres-auth:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Public auth endpoints (login and health check don't require auth)
      - "traefik.http.routers.auth-public.rule=PathPrefix(`/api/v1/login`) || PathPrefix(`/health`)"
      - "traefik.http.routers.auth-public.entrypoints=web"
      - "traefik.http.routers.auth-public.service=auth-service"
      
      # Protected admin endpoints (require authentication)
      - "traefik.http.routers.auth-admin.rule=PathPrefix(`/api/v1/admin`)"
      - "traefik.http.routers.auth-admin.entrypoints=web"
      - "traefik.http.routers.auth-admin.middlewares=auth-middleware"
      - "traefik.http.routers.auth-admin.service=auth-service"
      
      # Service definition
      - "traefik.http.services.auth-service.loadbalancer.server.port=8085"
      
      # ForwardAuth middleware definition
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth-service:8085/api/v1/auth"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-Forwarded-User"
      
      # Internal auth endpoint (only for Traefik access)
      - "traefik.http.routers.auth-internal.rule=PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.auth-internal.entrypoints=web"
      - "traefik.http.routers.auth-internal.service=auth-service"
    networks:
      - fitness-network
    restart: unless-stopped

networks:
  fitness-network:
    name: ${DOCKER_NETWORK_NAME:-fitness-network}
    external: true

volumes:
  postgres_auth_data:
