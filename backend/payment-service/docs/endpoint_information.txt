# PAYMENT SERVICE API ENDPOINT DOCUMENTATION

Base URL: http://localhost:8003/api/v1

## HEALTH CHECK ENDPOINT

### Check Service Health
Endpoint: GET /health
Description: Verifies the service is running properly
Response: 
- 200 OK with JSON:
```json
{
  "status": "up",
  "service": "payment-service",
  "time": "2023-07-15T12:00:00Z"
}
```

-----------------------------------------------------------

## PAYMENT ENDPOINTS

### 1. Get a Payment
Endpoint: GET /payments/{id}
Description: Retrieves a specific payment's information
Path Parameters:
- id: Payment ID (integer)
Response:
```json
{
  "payment_id": 1,
  "member_id": 101,
  "amount": 99.99,
  "payment_date": "2023-07-01T10:00:00Z",
  "payment_method": "credit_card",
  "payment_status": "completed",
  "invoice_number": "INV-2023-0001",
  "description": "Monthly membership fee",
  "payment_type_id": 1,
  "created_at": "2023-07-01T10:00:00Z",
  "updated_at": "2023-07-01T10:00:00Z",
  "payment_type_name": "Membership Fee"
}
```
Error Responses:
- 400: Invalid payment ID
- 404: Payment not found
- 500: Internal server error

### 2. Create a Payment
Endpoint: POST /payments
Description: Creates a new payment
Request Body:
```json
{
  "member_id": 103,
  "amount": 50.00,
  "payment_date": "2023-07-15T14:30:00Z",
  "payment_method": "cash",
  "payment_status": "completed",
  "description": "Personal training session",
  "payment_type_id": 2
}
```
Response:
- 201 Created with the newly created payment including ID and timestamps
Error Responses:
- 400: Invalid request body or validation error
- 500: Internal server error

### 3. Update a Payment
Endpoint: PUT /payments/{id}
Description: Updates an existing payment
Path Parameters:
- id: Payment ID (integer)
Request Body:
```json
{
  "member_id": 103,
  "amount": 55.00,
  "payment_date": "2023-07-15T14:30:00Z",
  "payment_method": "credit_card",
  "payment_status": "completed",
  "description": "Updated: Personal training session plus equipment rental",
  "payment_type_id": 2
}
```
Response:
- 200 OK with the updated payment data
Error Responses:
- 400: Invalid payment ID or request body
- 404: Payment not found
- 500: Internal server error

### 4. Delete a Payment
Endpoint: DELETE /payments/{id}
Description: Deletes a payment
Path Parameters:
- id: Payment ID (integer)
Response:
- 200 OK with success message
Error Responses:
- 400: Invalid payment ID
- 404: Payment not found
- 500: Internal server error

### 5. List Payments
Endpoint: GET /payments
Description: Retrieves a list of payments with optional pagination
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response:
```json
{
  "data": [
    {
      "payment_id": 1,
      "member_id": 101,
      "amount": 99.99,
      "payment_date": "2023-07-01T10:00:00Z",
      "payment_method": "credit_card",
      "payment_status": "completed",
      "invoice_number": "INV-2023-0001",
      "description": "Monthly membership fee",
      "payment_type_id": 1,
      "created_at": "2023-07-01T10:00:00Z",
      "updated_at": "2023-07-01T10:00:00Z",
      "payment_type_name": "Membership Fee"
    }
  ],
  "page": 1,
  "pageSize": 10,
  "totalItems": 10,
  "totalPages": 1
}
```
Error Responses:
- 500: Internal server error

### 6. Get Payments by Member
Endpoint: GET /payments/member/{memberID}
Description: Retrieves payments for a specific member
Path Parameters:
- memberID: Member ID (integer)
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response:
```json
{
  "data": [
    {
      "payment_id": 1,
      "member_id": 101,
      "amount": 99.99,
      "payment_date": "2023-07-01T10:00:00Z",
      "payment_method": "credit_card",
      "payment_status": "completed",
      "invoice_number": "INV-2023-0001",
      "description": "Monthly membership fee",
      "payment_type_id": 1,
      "created_at": "2023-07-01T10:00:00Z",
      "updated_at": "2023-07-01T10:00:00Z",
      "payment_type_name": "Membership Fee"
    }
  ],
  "page": 1,
  "pageSize": 10,
  "totalItems": 2,
  "totalPages": 1
}
```
Error Responses:
- 400: Invalid member ID
- 500: Internal server error

### 7. Get Payments by Status
Endpoint: GET /payments/status/{status}
Description: Retrieves payments with a specific status
Path Parameters:
- status: Payment status (string, e.g., "completed", "pending", "failed")
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response: Same format as List Payments
Error Responses:
- 400: Invalid status
- 500: Internal server error

### 8. Get Payments by Method
Endpoint: GET /payments/method/{method}
Description: Retrieves payments with a specific payment method
Path Parameters:
- method: Payment method (string, e.g., "credit_card", "cash")
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response: Same format as List Payments
Error Responses:
- 400: Invalid method
- 500: Internal server error

### 9. Get Payments by Type
Endpoint: GET /payments/type/{typeID}
Description: Retrieves payments with a specific payment type
Path Parameters:
- typeID: Payment type ID (integer)
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response: Same format as List Payments
Error Responses:
- 400: Invalid type ID
- 500: Internal server error

### 10. Get Payment Statistics
Endpoint: GET /payments/statistics
Description: Retrieves payment statistics
Query Parameters:
- memberID: Filter by member ID (optional)
- typeID: Filter by payment type ID (optional)
- startDate: Filter by start date (optional, format: YYYY-MM-DD)
- endDate: Filter by end date (optional, format: YYYY-MM-DD)
Response:
```json
{
  "total_payments": 10,
  "total_amount": 945.96,
  "average_amount": 94.60,
  "pending_payments": 1,
  "completed_payments": 8,
  "failed_payments": 1
}
```
Error Responses:
- 500: Internal server error

-----------------------------------------------------------

## PAYMENT TYPE ENDPOINTS

### 1. Get a Payment Type
Endpoint: GET /payment-types/{id}
Description: Retrieves a specific payment type
Path Parameters:
- id: Payment type ID (integer)
Response:
```json
{
  "payment_type_id": 1,
  "type_name": "Membership Fee",
  "description": "Regular membership subscription payment",
  "is_active": true,
  "created_at": "2023-06-01T10:00:00Z",
  "updated_at": "2023-06-01T10:00:00Z"
}
```
Error Responses:
- 400: Invalid payment type ID
- 404: Payment type not found
- 500: Internal server error

### 2. Create a Payment Type
Endpoint: POST /payment-types
Description: Creates a new payment type
Request Body:
```json
{
  "type_name": "Event Fee",
  "description": "Payment for special events and workshops",
  "is_active": true
}
```
Response:
- 201 Created with the newly created payment type
Error Responses:
- 400: Invalid request body or validation error
- 409: Payment type name already exists
- 500: Internal server error

### 3. Update a Payment Type
Endpoint: PUT /payment-types/{id}
Description: Updates an existing payment type
Path Parameters:
- id: Payment type ID (integer)
Request Body:
```json
{
  "type_name": "Event Fee",
  "description": "Payment for special events, workshops, and seminars",
  "is_active": true
}
```
Response:
- 200 OK with the updated payment type
Error Responses:
- 400: Invalid payment type ID or request body
- 404: Payment type not found
- 409: Payment type name already exists
- 500: Internal server error

### 4. Delete a Payment Type
Endpoint: DELETE /payment-types/{id}
Description: Deletes a payment type
Path Parameters:
- id: Payment type ID (integer)
Response:
- 200 OK with success message
Error Responses:
- 400: Invalid payment type ID
- 404: Payment type not found
- 409: Payment type is in use by payments
- 500: Internal server error

### 5. List Payment Types
Endpoint: GET /payment-types
Description: Retrieves a list of payment types
Query Parameters:
- active: Filter by active status (boolean, optional)
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response:
```json
{
  "data": [
    {
      "payment_type_id": 1,
      "type_name": "Membership Fee",
      "description": "Regular membership subscription payment",
      "is_active": true,
      "created_at": "2023-06-01T10:00:00Z",
      "updated_at": "2023-06-01T10:00:00Z"
    }
  ],
  "page": 1,
  "pageSize": 10,
  "totalItems": 5,
  "totalPages": 1
}
```
Error Responses:
- 500: Internal server error

### 6. Toggle Payment Type Status
Endpoint: PUT /payment-types/{id}/status
Description: Activates or deactivates a payment type
Path Parameters:
- id: Payment type ID (integer)
Request Body:
```json
{
  "is_active": false
}
```
Response:
- 200 OK with success message
Error Responses:
- 400: Invalid payment type ID or request body
- 404: Payment type not found
- 500: Internal server error

-----------------------------------------------------------

## TRANSACTION ENDPOINTS

### 1. Get a Transaction
Endpoint: GET /transactions/{id}
Description: Retrieves a specific transaction
Path Parameters:
- id: Transaction ID (integer)
Response:
```json
{
  "transaction_id": 1,
  "payment_id": 1,
  "transaction_date": "2023-07-01T10:01:15Z",
  "transaction_status": "success",
  "transaction_reference": "TXN123456789",
  "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH123\"}",
  "created_at": "2023-07-01T10:01:15Z",
  "updated_at": "2023-07-01T10:01:15Z"
}
```
Error Responses:
- 400: Invalid transaction ID
- 404: Transaction not found
- 500: Internal server error

### 2. Create a Transaction
Endpoint: POST /transactions
Description: Creates a new transaction
Request Body:
```json
{
  "payment_id": 11,
  "transaction_date": "2023-07-15T14:35:00Z",
  "transaction_status": "success",
  "transaction_reference": "TXN987654321",
  "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH999\"}"
}
```
Response:
- 201 Created with the newly created transaction
Error Responses:
- 400: Invalid request body or validation error
- 404: Referenced payment not found
- 500: Internal server error

### 3. Update a Transaction
Endpoint: PUT /transactions/{id}
Description: Updates an existing transaction
Path Parameters:
- id: Transaction ID (integer)
Request Body:
```json
{
  "payment_id": 1,
  "transaction_date": "2023-07-01T10:01:15Z",
  "transaction_status": "success",
  "transaction_reference": "TXN123456789-A",
  "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH123-A\"}"
}
```
Response:
- 200 OK with the updated transaction
Error Responses:
- 400: Invalid transaction ID or request body
- 404: Transaction not found
- 500: Internal server error

### 4. Delete a Transaction
Endpoint: DELETE /transactions/{id}
Description: Deletes a transaction
Path Parameters:
- id: Transaction ID (integer)
Response:
- 200 OK with success message
Error Responses:
- 400: Invalid transaction ID
- 404: Transaction not found
- 500: Internal server error

### 5. List Transactions
Endpoint: GET /transactions
Description: Retrieves a list of transactions
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response:
```json
{
  "data": [
    {
      "transaction_id": 1,
      "payment_id": 1,
      "transaction_date": "2023-07-01T10:01:15Z",
      "transaction_status": "success",
      "transaction_reference": "TXN123456789",
      "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH123\"}",
      "created_at": "2023-07-01T10:01:15Z",
      "updated_at": "2023-07-01T10:01:15Z"
    }
  ],
  "page": 1,
  "pageSize": 10,
  "totalItems": 10,
  "totalPages": 1
}
```
Error Responses:
- 500: Internal server error

### 6. Get Transactions by Payment
Endpoint: GET /transactions/payment/{paymentID}
Description: Retrieves transactions for a specific payment
Path Parameters:
- paymentID: Payment ID (integer)
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response:
```json
{
  "data": [
    {
      "transaction_id": 1,
      "payment_id": 1,
      "transaction_date": "2023-07-01T10:01:15Z",
      "transaction_status": "success",
      "transaction_reference": "TXN123456789",
      "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH123\"}",
      "created_at": "2023-07-01T10:01:15Z",
      "updated_at": "2023-07-01T10:01:15Z"
    }
  ],
  "page": 1,
  "pageSize": 10,
  "totalItems": 1,
  "totalPages": 1
}
```
Error Responses:
- 400: Invalid payment ID
- 500: Internal server error

### 7. Get Transactions by Status
Endpoint: GET /transactions/status/{status}
Description: Retrieves transactions with a specific status
Path Parameters:
- status: Transaction status (string, e.g., "success", "failed", "pending")
Query Parameters:
- page: Page number (default: 1)
- pageSize: Number of items per page (default: 10)
Response: Same format as List Transactions
Error Responses:
- 400: Invalid status
- 500: Internal server error

### 8. Process Payment
Endpoint: POST /transactions/process
Description: Processes a payment and creates a transaction
Request Body:
```json
{
  "payment_id": 12,
  "transaction_status": "success",
  "transaction_reference": "TXN-PROCESS-001",
  "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH-PROC-001\"}"
}
```
Response:
- 201 Created with the newly created transaction
Error Responses:
- 400: Invalid request body or validation error
- 404: Referenced payment not found
- 500: Internal server error

-----------------------------------------------------------

## TESTING WITH CURL

### Health Check
```bash
curl -X GET http://localhost:8003/health
```

### Create a Payment
```bash
curl -X POST \
  http://localhost:8003/api/v1/payments \
  -H 'Content-Type: application/json' \
  -d '{
    "member_id": 103,
    "amount": 50.00,
    "payment_date": "2023-07-15T14:30:00Z",
    "payment_method": "cash",
    "payment_status": "completed",
    "description": "Personal training session",
    "payment_type_id": 2
  }'
```

### Get a Payment
```bash
curl -X GET http://localhost:8003/api/v1/payments/1
```

### List Payments
```bash
curl -X GET "http://localhost:8003/api/v1/payments?page=1&pageSize=10"
```

### Get Payments by Member
```bash
curl -X GET http://localhost:8003/api/v1/payments/member/101
```

### Create a Transaction
```bash
curl -X POST \
  http://localhost:8003/api/v1/transactions \
  -H 'Content-Type: application/json' \
  -d '{
    "payment_id": 11,
    "transaction_date": "2023-07-15T14:35:00Z",
    "transaction_status": "success",
    "transaction_reference": "TXN987654321",
    "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH999\"}"
  }'
```

### Process a Payment
```bash
curl -X POST \
  http://localhost:8003/api/v1/transactions/process \
  -H 'Content-Type: application/json' \
  -d '{
    "payment_id": 12,
    "transaction_status": "success",
    "transaction_reference": "TXN-PROCESS-001",
    "gateway_response": "{\"processor\":\"Stripe\",\"status\":\"succeeded\",\"auth_code\":\"AUTH-PROC-001\"}"
  }'
```

### Get Payment Statistics
```bash
curl -X GET "http://localhost:8003/api/v1/payments/statistics?memberID=101&startDate=2023-01-01&endDate=2023-12-31"
```
